# Импортируем модуль turtle для рисования и работы с графикой.
# Импортируем модуль time для работы с задержками.
# Импортируем модуль random для генерации случайных позиций еды.

# Настройки окна
    # Создаём игровое окно.
    # Задаём заголовок окна.
    # Устанавливаем чёрный цвет фона.
    # Устанавливаем размер окна 600x600 пикселей.
    # Отключаем автоматическое обновление экрана, чтобы контролировать обновления вручную.

# Голова змейки
    # Создаём объект головы змейки.
    # Устанавливаем скорость анимации головы (0 - максимальная).
    # Устанавливаем форму головы змейки в виде квадрата.
    # Задаём цвет головы змейки - белый.
    # Отключаем рисование линий за змейкой.
    # Устанавливаем начальную позицию головы в центре экрана (0, 0).
    # Задаём начальное направление движения как "стоп" (змейка стоит на месте).

# Еда для змейки
    # Создаём объект еды.
    # Устанавливаем скорость анимации для еды.
    # Устанавливаем форму еды в виде круга.
    # Задаём красный цвет для еды.
    # Отключаем рисование линии за едой.
    # Устанавливаем еду на начальную позицию (0, 100 пикселей по оси Y).

# Тело змейки (список для сегментов тела)
segments = []                     # Создаём пустой список для хранения сегментов тела змейки.

# Управление змейкой: функции для изменения направления движения
def go_up():
    if head.direction != "down":  # Если змейка не движется вниз, можно повернуть вверх.
        head.direction = "up"     # Меняем направление на "вверх".

def go_down():
    if head.direction != "up":    # Если змейка не движется вверх, можно повернуть вниз.
        head.direction = "down"   # Меняем направление на "вниз".

def go_left():
    if head.direction != "right": # Если змейка не движется вправо, можно повернуть влево.
        head.direction = "left"   # Меняем направление на "влево".

def go_right():
    if head.direction != "left":  # Если змейка не движется влево, можно повернуть вправо.
        head.direction = "right"  # Меняем направление на "вправо".

# Функция для перемещения головы змейки
def move():
    if head.direction == "up":    # Если направление "вверх", то меняем координату Y.
        y = head.ycor()           # Получаем текущую координату Y.
        head.sety(y + 20)         # Перемещаем голову вверх на 20 пикселей.

    if head.direction == "down":  # Если направление "вниз", то меняем координату Y.
        y = head.ycor()           # Получаем текущую координату Y.
        head.sety(y - 20)         # Перемещаем голову вниз на 20 пикселей.

    if head.direction == "left":  # Если направление "влево", то меняем координату X.
        x = head.xcor()           # Получаем текущую координату X.
        head.setx(x - 20)         # Перемещаем голову влево на 20 пикселей.

    if head.direction == "right": # Если направление "вправо", то меняем координату X.
        x = head.xcor()           # Получаем текущую координату X.
        head.setx(x + 20)         # Перемещаем голову вправо на 20 пикселей.

# Управление с клавиатуры
# Сообщаем окну, что оно должно "слушать" нажатия клавиш.
# Устанавливаем управление: нажатие клавиши "Вверх" вызывает функцию go_up().
# Нажатие клавиши "Вниз" вызывает функцию go_down().
# Нажатие клавиши "Влево" вызывает функцию go_left().
# Нажатие клавиши "Вправо" вызывает функцию go_right().

# Основной цикл игры
while True:
    window.update()               # Обновляем окно игры на каждом кадре.

    # Проверка столкновения с границами окна
    if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
        time.sleep(1)             # Задержка в 1 секунду перед сбросом игры.
        head.goto(0, 0)           # Перемещаем голову змейки обратно в центр.
        head.direction = "stop"   # Останавливаем движение змейки.

        # Удаление сегментов тела змейки после столкновения
        for segment in segments:
            segment.goto(1000, 1000)  # Убираем сегмент тела за пределы экрана.
        segments.clear()           # Очищаем список сегментов (обнуляем змейку).

    # Проверка столкновения с едой
    if head.distance(food) < 20:   # Если расстояние между головой змейки и едой меньше 20 пикселей:
        # Перемещаем еду в случайную позицию
        x = random.randint(-290, 290)  # Случайное значение X для новой позиции еды.
        y = random.randint(-290, 290)  # Случайное значение Y для новой позиции еды.
        food.goto(x, y)                # Перемещаем еду на новую случайную позицию.

        # Добавляем новый сегмент тела змейки
        new_segment = turtle.Turtle()  # Создаём новый сегмент.
        new_segment.speed(0)           # Устанавливаем скорость сегмента.
        new_segment.shape("square")    # Устанавливаем форму сегмента (квадрат).
        new_segment.color("grey")      # Задаём цвет сегмента (серый).
        new_segment.penup()            # Отключаем рисование линий за сегментом.
        segments.append(new_segment)   # Добавляем сегмент в список сегментов.

    # Перемещение сегментов тела змейки
    for i in range(len(segments) - 1, 0, -1):  # Двигаем каждый сегмент на место предыдущего.
        x = segments[i - 1].xcor()  # Получаем X координату предыдущего сегмента.
        y = segments[i - 1].ycor()  # Получаем Y координату предыдущего сегмента.
        segments[i].goto(x, y)      # Перемещаем сегмент на место предыдущего.

    # Перемещаем первый сегмент за головой
    if len(segments) > 0:
        x = head.xcor()             # Получаем текущую X координату головы.
        y = head.ycor()             # Получаем текущую Y координату головы.
        segments[0].goto(x, y)      # Перемещаем первый сегмент за голову.

    move()                          # Вызываем функцию движения для головы змейки.

    # Проверка столкновения с собственным телом
    for segment in segments:
        if segment.distance(head) < 20:  # Если расстояние между головой и сегментом тела меньше 20 пикселей:
            time.sleep(1)               # Задержка в 1 секунду перед сбросом игры.
            head.goto(0, 0)             # Перемещаем голову змейки обратно в центр.
            head.direction = "stop"     # Останавливаем движение змейки.

            # Удаляем сегменты тела змейки
            for segment in segments:
                segment.goto(1000, 1000)  # Убираем сегмент тела за пределы экрана.
            segments.clear()              # Очищаем список сегментов.

    time.sleep(0.1)                      # Устанавливаем паузу для контроля скорости игры.

window.mainloop()                        # Запускаем основной цикл окна (не закрывается, пока игра не завершена).
